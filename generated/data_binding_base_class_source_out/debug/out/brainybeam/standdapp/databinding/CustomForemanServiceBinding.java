// Generated by view binder compiler. Do not edit!
package brainybeam.standdapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import brainybeam.standdapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CustomForemanServiceBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView customForemanServiceAddress;

  @NonNull
  public final TextView customForemanServiceCharge;

  @NonNull
  public final TextView customForemanServiceDistance;

  @NonNull
  public final TextView customForemanServiceName;

  @NonNull
  public final TextView customForemanServiceSelect;

  @NonNull
  public final LinearLayout customMapVehicleLayout;

  private CustomForemanServiceBinding(@NonNull LinearLayout rootView,
      @NonNull TextView customForemanServiceAddress, @NonNull TextView customForemanServiceCharge,
      @NonNull TextView customForemanServiceDistance, @NonNull TextView customForemanServiceName,
      @NonNull TextView customForemanServiceSelect, @NonNull LinearLayout customMapVehicleLayout) {
    this.rootView = rootView;
    this.customForemanServiceAddress = customForemanServiceAddress;
    this.customForemanServiceCharge = customForemanServiceCharge;
    this.customForemanServiceDistance = customForemanServiceDistance;
    this.customForemanServiceName = customForemanServiceName;
    this.customForemanServiceSelect = customForemanServiceSelect;
    this.customMapVehicleLayout = customMapVehicleLayout;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CustomForemanServiceBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CustomForemanServiceBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.custom_foreman_service, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CustomForemanServiceBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.custom_foreman_service_address;
      TextView customForemanServiceAddress = ViewBindings.findChildViewById(rootView, id);
      if (customForemanServiceAddress == null) {
        break missingId;
      }

      id = R.id.custom_foreman_service_charge;
      TextView customForemanServiceCharge = ViewBindings.findChildViewById(rootView, id);
      if (customForemanServiceCharge == null) {
        break missingId;
      }

      id = R.id.custom_foreman_service_distance;
      TextView customForemanServiceDistance = ViewBindings.findChildViewById(rootView, id);
      if (customForemanServiceDistance == null) {
        break missingId;
      }

      id = R.id.custom_foreman_service_name;
      TextView customForemanServiceName = ViewBindings.findChildViewById(rootView, id);
      if (customForemanServiceName == null) {
        break missingId;
      }

      id = R.id.custom_foreman_service_select;
      TextView customForemanServiceSelect = ViewBindings.findChildViewById(rootView, id);
      if (customForemanServiceSelect == null) {
        break missingId;
      }

      LinearLayout customMapVehicleLayout = (LinearLayout) rootView;

      return new CustomForemanServiceBinding((LinearLayout) rootView, customForemanServiceAddress,
          customForemanServiceCharge, customForemanServiceDistance, customForemanServiceName,
          customForemanServiceSelect, customMapVehicleLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
