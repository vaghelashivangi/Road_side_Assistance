// Generated by view binder compiler. Do not edit!
package brainybeam.standdapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import brainybeam.standdapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CustomNewForemanServiceBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView customNewForemanServiceAddress;

  @NonNull
  public final Button customNewForemanServiceCancle;

  @NonNull
  public final TextView customNewForemanServiceCharge;

  @NonNull
  public final Button customNewForemanServiceConfirm;

  @NonNull
  public final TextView customNewForemanServiceDate;

  @NonNull
  public final TextView customNewForemanServiceId;

  @NonNull
  public final TextView customNewForemanServiceName;

  @NonNull
  public final TextView customNewForemanServiceRegistration;

  @NonNull
  public final TextView customNewForemanServiceService;

  private CustomNewForemanServiceBinding(@NonNull LinearLayout rootView,
      @NonNull TextView customNewForemanServiceAddress,
      @NonNull Button customNewForemanServiceCancle,
      @NonNull TextView customNewForemanServiceCharge,
      @NonNull Button customNewForemanServiceConfirm, @NonNull TextView customNewForemanServiceDate,
      @NonNull TextView customNewForemanServiceId, @NonNull TextView customNewForemanServiceName,
      @NonNull TextView customNewForemanServiceRegistration,
      @NonNull TextView customNewForemanServiceService) {
    this.rootView = rootView;
    this.customNewForemanServiceAddress = customNewForemanServiceAddress;
    this.customNewForemanServiceCancle = customNewForemanServiceCancle;
    this.customNewForemanServiceCharge = customNewForemanServiceCharge;
    this.customNewForemanServiceConfirm = customNewForemanServiceConfirm;
    this.customNewForemanServiceDate = customNewForemanServiceDate;
    this.customNewForemanServiceId = customNewForemanServiceId;
    this.customNewForemanServiceName = customNewForemanServiceName;
    this.customNewForemanServiceRegistration = customNewForemanServiceRegistration;
    this.customNewForemanServiceService = customNewForemanServiceService;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CustomNewForemanServiceBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CustomNewForemanServiceBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.custom_new_foreman_service, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CustomNewForemanServiceBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.custom_new_foreman_service_address;
      TextView customNewForemanServiceAddress = ViewBindings.findChildViewById(rootView, id);
      if (customNewForemanServiceAddress == null) {
        break missingId;
      }

      id = R.id.custom_new_foreman_service_cancle;
      Button customNewForemanServiceCancle = ViewBindings.findChildViewById(rootView, id);
      if (customNewForemanServiceCancle == null) {
        break missingId;
      }

      id = R.id.custom_new_foreman_service_charge;
      TextView customNewForemanServiceCharge = ViewBindings.findChildViewById(rootView, id);
      if (customNewForemanServiceCharge == null) {
        break missingId;
      }

      id = R.id.custom_new_foreman_service_confirm;
      Button customNewForemanServiceConfirm = ViewBindings.findChildViewById(rootView, id);
      if (customNewForemanServiceConfirm == null) {
        break missingId;
      }

      id = R.id.custom_new_foreman_service_date;
      TextView customNewForemanServiceDate = ViewBindings.findChildViewById(rootView, id);
      if (customNewForemanServiceDate == null) {
        break missingId;
      }

      id = R.id.custom_new_foreman_service_id;
      TextView customNewForemanServiceId = ViewBindings.findChildViewById(rootView, id);
      if (customNewForemanServiceId == null) {
        break missingId;
      }

      id = R.id.custom_new_foreman_service_name;
      TextView customNewForemanServiceName = ViewBindings.findChildViewById(rootView, id);
      if (customNewForemanServiceName == null) {
        break missingId;
      }

      id = R.id.custom_new_foreman_service_registration;
      TextView customNewForemanServiceRegistration = ViewBindings.findChildViewById(rootView, id);
      if (customNewForemanServiceRegistration == null) {
        break missingId;
      }

      id = R.id.custom_new_foreman_service_service;
      TextView customNewForemanServiceService = ViewBindings.findChildViewById(rootView, id);
      if (customNewForemanServiceService == null) {
        break missingId;
      }

      return new CustomNewForemanServiceBinding((LinearLayout) rootView,
          customNewForemanServiceAddress, customNewForemanServiceCancle,
          customNewForemanServiceCharge, customNewForemanServiceConfirm,
          customNewForemanServiceDate, customNewForemanServiceId, customNewForemanServiceName,
          customNewForemanServiceRegistration, customNewForemanServiceService);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
